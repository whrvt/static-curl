name: build-and-release

on:
  # run it manually
  workflow_dispatch:

jobs:
  build-Linux:
    name: build-Linux (${{ github.ref_name }})
    runs-on: ubuntu-latest
    container: registry.gitlab.steamos.cloud/proton/sniper/sdk:latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Build static cURL (Linux GLIBC)
        env:
          GCC_PATH: "/usr/lib/gcc-14/bin"
          ARCHES: x86_64 i686
          CURL_VERSION: ${{ vars.CURL_VERSION }}
          TLS_LIB: ${{ vars.TLS_LIB }}
          QUICTLS_VERSION: ${{ vars.QUICTLS_VERSION }}
          OPENSSL_VERSION: ${{ vars.OPENSSL_VERSION }}
          NGTCP2_VERSION: ${{ vars.NGTCP2_VERSION }}
          NGHTTP3_VERSION: ${{ vars.NGHTTP3_VERSION }}
          NGHTTP2_VERSION: ${{ vars.NGHTTP2_VERSION }}
          LIBIDN2_VERSION: ${{ vars.LIBIDN2_VERSION }}
          LIBUNISTRING_VERSION: ${{ vars.LIBUNISTRING_VERSION }}
          ZLIB_VERSION: ${{ vars.ZLIB_VERSION }}
          BROTLI_VERSION: ${{ vars.BROTLI_VERSION }}
          ZSTD_VERSION: ${{ vars.ZSTD_VERSION }}
          LIBSSH2_VERSION: ${{ vars.LIBSSH2_VERSION }}
          ARES_VERSION: ${{ vars.ARES_VERSION }}
          ENABLE_TRURL: ${{ vars.ENABLE_TRURL }}
          TRURL_VERSION: ${{ vars.TRURL_VERSION }}
          STATIC_LIBRARY: 1
          LIBC: glibc
          QBT_MUSL_CROSS_MAKE_VERSION: ${{ vars.QBT_MUSL_CROSS_MAKE_VERSION }}
          CONTAINER_IMAGE: registry.gitlab.steamos.cloud/proton/sniper/sdk:latest
          TOKEN_READ: ${{ secrets.GITHUB_TOKEN }}
        run: |
          update-alternatives --install /usr/bin/gcc gcc /usr/lib/gcc-14/bin/gcc 90 \
            --slave /usr/bin/g++ g++ /usr/lib/gcc-14/bin/g++ \
            --slave /usr/bin/gcov gcov /usr/lib/gcc-14/bin/gcov && \
          PATH="${GCC_PATH}:${PATH}" \
          ARCHES="${ARCHES}" \
          CURL_VERSION=${CURL_VERSION} \
          TLS_LIB=${TLS_LIB:-openssl} \
          QUICTLS_VERSION=${QUICTLS_VERSION:-3.3.0} \
          OPENSSL_VERSION=${OPENSSL_VERSION} \
          NGTCP2_VERSION=${NGTCP2_VERSION} \
          NGHTTP3_VERSION=${NGHTTP3_VERSION} \
          NGHTTP2_VERSION=${NGHTTP2_VERSION} \
          LIBIDN2_VERSION=${LIBIDN2_VERSION:-latest} \
          LIBUNISTRING_VERSION=${LIBUNISTRING_VERSION:-latest} \
          ZLIB_VERSION=${ZLIB_VERSION} \
          BROTLI_VERSION=${BROTLI_VERSION} \
          ZSTD_VERSION=${ZSTD_VERSION} \
          LIBSSH2_VERSION=${LIBSSH2_VERSION} \
          ARES_VERSION=${ARES_VERSION} \
          ENABLE_TRURL=${ENABLE_TRURL:-false} \
          TRURL_VERSION=${TRURL_VERSION} \
          STATIC_LIBRARY=${STATIC_LIBRARY} \
          LIBC=${LIBC} \
          QBT_MUSL_CROSS_MAKE_VERSION=${QBT_MUSL_CROSS_MAKE_VERSION} \
          CONTAINER_IMAGE=${CONTAINER_IMAGE} \
          TOKEN_READ=${TOKEN_READ} \
          sh curl-static-linux.sh

      - name: Set up environment
        run: |
          VERSION_FILE="$(find release /release /mnt -wholename "*release/version.txt" -print0 -quit || true)"
          [ -n "${VERSION_FILE}" ] && true
          VERSION="$(cat $VERSION_FILE)"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION_FILE=$VERSION_FILE" >> $GITHUB_ENV
          RELEASE_DIRECTORY="$(dirname $VERSION_FILE)"
          echo "RELEASE_DIRECTORY=$RELEASE_DIRECTORY" >> $GITHUB_ENV

      - name: Upload artifact (version)
        uses: actions/upload-artifact@v4
        with:
          name: curl-version
          path: ${{ env.VERSION_FILE }}
          retention-days: 90
          if-no-files-found: error
          overwrite: true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: curl-binary-linux-${{ env.VERSION }}
          path: ${{ env.RELEASE_DIRECTORY }}
          retention-days: 90
          if-no-files-found: error
          overwrite: true

  build-Windows:
    name: build-Windows (${{ github.ref_name }})
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Build static cURL (Windows)
        env:
          ARCHES: x86_64 i686
          CURL_VERSION: ${{ vars.CURL_VERSION }}
          TLS_LIB: ${{ vars.TLS_LIB }}
          QUICTLS_VERSION: ${{ vars.QUICTLS_VERSION }}
          OPENSSL_VERSION: ${{ vars.OPENSSL_VERSION }}
          NGTCP2_VERSION: ${{ vars.NGTCP2_VERSION }}
          NGHTTP3_VERSION: ${{ vars.NGHTTP3_VERSION }}
          NGHTTP2_VERSION: ${{ vars.NGHTTP2_VERSION }}
          LIBIDN2_VERSION: ${{ vars.LIBIDN2_VERSION }}
          LIBUNISTRING_VERSION: ${{ vars.LIBUNISTRING_VERSION }}
          ZLIB_VERSION: ${{ vars.ZLIB_VERSION }}
          BROTLI_VERSION: ${{ vars.BROTLI_VERSION }}
          ZSTD_VERSION: ${{ vars.ZSTD_VERSION }}
          LIBSSH2_VERSION: ${{ vars.LIBSSH2_VERSION }}
          ARES_VERSION: ${{ vars.ARES_VERSION }}
          ENABLE_TRURL: ${{ vars.ENABLE_TRURL }}
          TRURL_VERSION: ${{ vars.TRURL_VERSION }}
          CONTAINER_IMAGE: mstorsjo/llvm-mingw:latest
          TOKEN_READ: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ARCHES="${ARCHES}"
          CURL_VERSION=${CURL_VERSION}
          TLS_LIB=${TLS_LIB:-openssl}
          QUICTLS_VERSION=${QUICTLS_VERSION:-3.3.0}
          OPENSSL_VERSION=${OPENSSL_VERSION}
          NGTCP2_VERSION=${NGTCP2_VERSION}
          NGHTTP3_VERSION=${NGHTTP3_VERSION}
          NGHTTP2_VERSION=${NGHTTP2_VERSION}
          LIBIDN2_VERSION=${LIBIDN2_VERSION:-latest}
          LIBUNISTRING_VERSION=${LIBUNISTRING_VERSION:-latest}
          ZLIB_VERSION=${ZLIB_VERSION}
          BROTLI_VERSION=${BROTLI_VERSION}
          ZSTD_VERSION=${ZSTD_VERSION}
          LIBSSH2_VERSION=${LIBSSH2_VERSION}
          ARES_VERSION=${ARES_VERSION}
          ENABLE_TRURL=${ENABLE_TRURL:-false}
          TRURL_VERSION=${TRURL_VERSION}
          CONTAINER_IMAGE=${CONTAINER_IMAGE}
          TOKEN_READ=${TOKEN_READ}
          sh curl-static-win.sh

      - name: Set up environment
        run: |
          VERSION=`cat release/version.txt`
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Upload artifact (version)
        uses: actions/upload-artifact@v4
        with:
          name: curl-version
          path: release/version.txt
          retention-days: 90
          if-no-files-found: error
          overwrite: true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: curl-binary-windows-${{ env.VERSION }}
          path: release
          retention-days: 90
          if-no-files-found: error
          overwrite: true

  release:
    name: release curl (${{ github.ref_name }})
    needs: [build-Linux, build-Windows]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: curl-version
          path: curl-version

      - name: Set up environment
        run: |
          VERSION=`cat  curl-version/version.txt`
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download artifact (linux)
        uses: actions/download-artifact@v4
        with:
          name: curl-binary-linux-${{ env.VERSION }}
          path: release

      - name: Download artifact (windows)
        uses: actions/download-artifact@v4
        with:
          name: curl-binary-windows-${{ env.VERSION }}
          path: release

      - name: List compiled files
        run: |
          ls -l release/*
          echo
          file release/bin/curl-*
          echo
          cat release/version-info.txt
          echo
          sha256sum release/bin/curl-*

      - name: Compress and Create Release Note
        env:
          TLS_LIB: ${{ vars.TLS_LIB }}
        run: |
          TLS_LIB=${TLS_LIB}
          bash release.sh

      - name: List compressed files
        run: ls -l release/*

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        if: github.ref == 'refs/heads/main'
        with:
          files: |
            release/bin/curl-*.tar.xz
            release/curl-*.tar.xz
          body_path: release/release.md
          tag_name: ${{ env.VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: curl-release-${{ env.VERSION }}
          path: release
          retention-days: 90
          if-no-files-found: error
          overwrite: true
